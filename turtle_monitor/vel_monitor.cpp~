#include <ros/ros.h>
#include <turtlesim/Velocity.h>
#include <iomanip>

#define pi 3.14159265359

enum Direction {up, down, left, right, idle};
Direction prevDir = idle;
Direction dir = right;

void velMessageRecieved( const turtlesim::Velocity& msg) {
  /*ROS_INFO_STREAM(std::setprecision(2) << std::fixed << "angular: " << msg.angular << ", linear:" << msg.linear);
  */
  double ang = pi/2;
  if((msg.angular > 0) && (msg.linear == 0)) {  
    ROS_INFO_STREAM( "balra fordult!" );
    prevDir = dir;
    dir = left; 
  }
  if((msg.angular == 0) && (msg.linear == 1)){
    ROS_INFO_STREAM( "elore ment!" );
    prevDir = dir;
    dir = up;
  }
  if((msg.angular < 0) && (msg.linear == 0)){
    ROS_INFO_STREAM( "jobbra fordult!" );
    prevDir = dir;
    dir = right;
  }
  if((msg.angular == 0) && (msg.linear ==-1)){
    ROS_INFO_STREAM( "hatrafele ment!" );
    prevDir = dir;
    dir = down;
  }
    
}

int main(int argc, char **argv) {
  ros::init(argc, argv, "subscribe_to_vel");
  ros::NodeHandle nh;

  ros::Subscriber sub = nh.subscribe("turtle1/command_velocity" , 1000, &velMessageRecieved);

  ros::spin();

}
